package org.nunnerycode.bukkit.mobbountyreloaded.exploits;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.nunnerycode.bukkit.mobbountyreloaded.MobBountyReloadedPlugin;
import org.nunnerycode.bukkit.mobbountyreloaded.events.MobBountyReloadedRewardEvent;

import java.util.HashMap;
import java.util.Map;

public final class ExploitListener implements Listener {

    private MobBountyReloadedPlugin plugin;
    private Map<String, PlayerKillData> playerKillDataMap;

    public ExploitListener(MobBountyReloadedPlugin plugin) {
        this.plugin = plugin;
        playerKillDataMap = new HashMap<>();
    }

    @EventHandler
    public void onMobBountyReloadedRewardEvent(MobBountyReloadedRewardEvent event) {
        Player player = event.getPlayer();
        PlayerKillData playerKillData;
        if (playerKillDataMap.containsKey(player.getName())) {
            playerKillData = playerKillDataMap.get(player.getName());
        } else {
            playerKillData = new PlayerKillData();
        }
        if (plugin.getIvorySettings().getBoolean("exploits.depreciative-return.enabled", false)) {
            long timestamp = System.currentTimeMillis() / 1000; // Timestamp in seconds
            if (isDepreciativeMobType(event, playerKillData) &&
                    isWithinTimeout(playerKillData, timestamp) && isWithinRange(playerKillData, event))
            {
                double newPercentage = playerKillData.getLastKillPercentage() - plugin.getIvorySettings()
                    .getDouble("exploits.depreciative-return.percentage", 0.1);
                double minThreshold = plugin.getIvorySettings().getDouble("exploits.depreciative-return.min", -2.0);
                if (newPercentage < minThreshold) {
                    newPercentage = minThreshold;
                }
                playerKillData.setLastKillPercentage(newPercentage);
                event.setAmount(event.getAmount() * playerKillData.getLastKillPercentage());
            } else {
                playerKillData.setLastKillPercentage(1.0);
                playerKillData.setLastKillType(event.getEntity().getType());
            }
            playerKillData.setLastKillTimestamp(timestamp);
        }
        playerKillData.setLastKillLocation(event.getEntity().getLocation());
        if (plugin.getIvorySettings().getBoolean("exploits.mob-spawner.enabled", false)) {
            int radius = plugin.getIvorySettings().getInt("exploits.mob-spawner.radius", 5);
            double percentage =
                    plugin.getIvorySettings().getDouble("exploits.mob-spawner.percentage", 0.5);
            if (isMaterialWithinRadius(event.getEntity().getLocation(), Material.MOB_SPAWNER, radius)) {
                event.setAmount(event.getAmount() * percentage);
            }
        }

        playerKillDataMap.put(player.getName(), playerKillData);
    }

    private boolean isDepreciativeMobType(MobBountyReloadedRewardEvent event, PlayerKillData playerKillData) {
        return plugin.getIvorySettings().getString("exploits.depreciative-return.mobtype", "ALL").equalsIgnoreCase("ALL") ||
                (event.getEntity().getType() == playerKillData.getLastKillType());
    }

    private boolean isWithinRange(PlayerKillData playerKillData, MobBountyReloadedRewardEvent event) {
        Location lastLocation = playerKillData.getLastKillLocation() != null ? playerKillData.getLastKillLocation() : new Location(event.getEntity().getWorld(), 0,0,0);
        double distance = plugin.getIvorySettings().getDouble("exploits.depreciative-return.distance", 17.0);
        if (event.getEntity().getWorld().getName().equals(lastLocation.getWorld().getName())) {
            return event.getEntity().getLocation().distanceSquared(lastLocation) < distance * distance;
        }
        return false;
    }

    private boolean isWithinTimeout(PlayerKillData playerKillData, long timestamp) {
        return ((timestamp - playerKillData.getLastKillTimestamp()) < plugin.getIvorySettings().getInt("exploits.depreciative-return.timeout", 180));
    }

    private boolean isMaterialWithinRadius(Location location, Material material, int radius) {
        for (int x = -radius; x <= radius; x++) {
            for (int y = -radius; y <= radius; y++) {
                for (int z = -radius; z <= radius; z++) {
                    Block b =
                            new Location(location.getWorld(), location.getX() + x, location.getY() + y,
                                    location.getZ() + z).getBlock();
                    if (b.getType() == material) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

}
